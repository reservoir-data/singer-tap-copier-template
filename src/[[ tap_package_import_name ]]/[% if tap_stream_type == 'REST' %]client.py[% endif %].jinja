[%- set base_stream = tap_source_id + 'Stream' -%]
[%- set authenticator = tap_source_id + 'Authenticator' -%]

"""REST client handling, including [[ base_stream ]] base class."""

from __future__ import annotations

import sys
from typing import TYPE_CHECKING, Any

[% if tap_auth_method == "Basic Auth" -%]
from requests.auth import HTTPBasicAuth
[% endif -%]

from singer_sdk import [[ tap_stream_type ]]Stream

[%- if tap_auth_method == "API Key" %]
from singer_sdk.authenticators import APIKeyAuthenticator
[%- elif tap_auth_method == "Bearer Token" %]
from singer_sdk.authenticators import BearerTokenAuthenticator
[%- endif %]

[%- if tap_auth_method in ("OAuth2", "JWT") %]

from [[ tap_package_import_name ]].auth import [[ authenticator ]]
[%- endif %]

if sys.version_info >= (3, 12):
    from typing import override
else:
    from typing_extensions import override

if TYPE_CHECKING:
    from singer_sdk.helpers.types import Context


class [[ base_stream ]]([[ tap_stream_type ]]Stream[Any]):
    """[[ tap_source_name ]] stream class."""

    url_base = "https://api.mysample.com"
    records_jsonpath = "$[*]"  # Or override `parse_response`.
    next_page_token_jsonpath = "$.next_page"  # noqa: S105

[%- if tap_auth_method in ("OAuth2", "JWT") %]

    @override
    @property
    def authenticator(self) -> [[ authenticator ]]:
        return [[ authenticator ]](
            oauth_endpoint="TODO",
            oauth_scopes="TODO",
            cliend_id=self.config["client_id"],
            client_secret=self.config["client_secret"],
        )

[%- elif tap_auth_method == "API Key" %]

    @override
    @property
    def authenticator(self) -> APIKeyAuthenticator:
        return APIKeyAuthenticator(
            key="x-api-key",
            value=self.config["api_key"],
            location="header",
        )

[%- elif tap_auth_method == "Bearer Token" %]

    @override
    @property
    def authenticator(self) -> BearerTokenAuthenticator:
        return BearerTokenAuthenticator(token=self.config["token"])

[%- elif tap_auth_method == "Basic Auth" %]

    @override
    @property
    def authenticator(self) -> HTTPBasicAuth:
        return HTTPBasicAuth(self.config["username"], self.config["password"])

[%- endif %]

    @override
    @property
    def http_headers(self) -> dict[str, str]:
        return {**super().http_headers}

    @override
    def get_url_params(
        self,
        context: Context | None,
        next_page_token: Any | None,
    ) -> dict[str, Any] | str:
        return super().get_url_params(context, next_page_token)
