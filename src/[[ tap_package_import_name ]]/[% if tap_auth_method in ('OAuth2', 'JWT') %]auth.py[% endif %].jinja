[%- set authenticator = tap_source_id + 'Authenticator' -%]

"""[[ tap_source_name ]] Authentication."""

from __future__ import annotations

[%- if tap_auth_method not in ("Basic Auth", "OAuth2", "JWT") %]
# TODO([[ author_username ]]): Delete this file or add custom authentication
# logic as needed.

[%- elif tap_auth_method == "OAuth2" %]
import typing as t

from singer_sdk.authenticators import OAuthAuthenticator, SingletonMeta


# The SingletonMeta metaclass makes your streams reuse the same authenticator instance.
# If this behaviour interferes with your use-case, you can remove the metaclass.
class [[ authenticator ]](OAuthAuthenticator, metaclass=SingletonMeta):
    """Authenticator class for [[ tap_source_name ]]."""

    @property
    def oauth_request_body(self) -> dict[str, t.Any]:
        """Define the OAuth request body for the [[ tap_source_name ]] API.

        Returns:
            Dictionary with request body for OAuth endpoint.
        """
        # TODO([[ author_username ]]): Define the request body needed for the API.
        return {
            "resource": "https://analysis.windows.net/powerbi/api",
            "scope": self.oauth_scopes,
            "client_id": self.config["client_id"],
            "username": self.config["username"],
            "password": self.config["password"],
            "grant_type": "password",
        }

[%- elif tap_auth_method == "JWT" %]
from singer_sdk.authenticators import OAuthJWTAuthenticator


class [[ authenticator ]](OAuthJWTAuthenticator):
    """Authenticator class for [[ tap_source_name ]]."""

[%- endif %]
