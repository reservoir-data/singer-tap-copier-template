[%- set authenticator = tap_source_id + 'Authenticator' -%]

"""[[ tap_source_name ]] Authentication."""

from __future__ import annotations

[%- if tap_auth_method not in ("Basic Auth", "OAuth2", "JWT") %]
# TODO([[ author_username ]]): Delete this file or add custom authentication
# logic as needed.

[%- elif tap_auth_method == "OAuth2" %]

import sys
from typing import Any

from singer_sdk.authenticators import OAuthAuthenticator, SingletonMeta

if sys.version_info >= (3, 12):
    from typing import override
else:
    from typing_extensions import override


# The SingletonMeta metaclass makes your streams reuse the same authenticator instance.
# If this behaviour interferes with your use-case, you can remove the metaclass.
class [[ authenticator ]](OAuthAuthenticator, metaclass=SingletonMeta):
    """Authenticator class for [[ tap_source_name ]]."""

    @override
    @property
    def oauth_request_body(self) -> dict[str, Any]:
        # TODO([[ author_username ]]): Define the request body needed for the API.
        return {
            "scope": self.oauth_scopes,
            "client_id": self.client_id,
            "client_secret": self.client_secret,
            "grant_type": "client_credentials",
        }

[%- elif tap_auth_method == "JWT" %]

from singer_sdk.authenticators import OAuthJWTAuthenticator


class [[ authenticator ]](OAuthJWTAuthenticator):
    """Authenticator class for [[ tap_source_name ]]."""

[%- endif %]
